[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "module",
        "description": "module",
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "configIO",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "tools",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "playerCache",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "configIO",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "tools",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "loadConfig",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "playerCache",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "loadConfig",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "playerCache",
        "importPath": "module",
        "description": "module",
        "isExtraImport": true,
        "detail": "module",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "pyjson5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyjson5",
        "description": "pyjson5",
        "detail": "pyjson5",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "PlayerCache",
        "importPath": "module.playerCache",
        "description": "module.playerCache",
        "isExtraImport": true,
        "detail": "module.playerCache",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "module.configIO",
        "description": "module.configIO",
        "peekOfCode": "class Config():\n    global path\n    def __init__(self, name: str) -> None:\n        global path\n        self.config: dict = dict()\n        self.config_path = f\"{path}/{name}.json5\"\n        if (os.path.exists(self.config_path)):\n            self.read()\n        pass\n    def __getConfigFileObj(self, mode: str) -> object:",
        "detail": "module.configIO",
        "documentation": {}
    },
    {
        "label": "pyBool2Json",
        "kind": 2,
        "importPath": "module.configIO",
        "description": "module.configIO",
        "peekOfCode": "def pyBool2Json(flag:bool) -> str:\n    if(flag):\n        return \"true\"\n    else:\n        return \"false\"\np2J = pyBool2Json",
        "detail": "module.configIO",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "module.configIO",
        "description": "module.configIO",
        "peekOfCode": "path = \"config\"\n# * End Config\nif (not os.path.exists(path)):\n    os.mkdir(path)\nclass Config():\n    global path\n    def __init__(self, name: str) -> None:\n        global path\n        self.config: dict = dict()\n        self.config_path = f\"{path}/{name}.json5\"",
        "detail": "module.configIO",
        "documentation": {}
    },
    {
        "label": "p2J",
        "kind": 5,
        "importPath": "module.configIO",
        "description": "module.configIO",
        "peekOfCode": "p2J = pyBool2Json",
        "detail": "module.configIO",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "module.loadConfig",
        "description": "module.loadConfig",
        "peekOfCode": "def init():\n    global server_url_list, enable\n    context.config: configIO.Config = configIO.Config(\n        \"AndreaYggdrasilProxy\")\n    if(not context.config.defaultCheck(\"YggdrasilServers\",\"Enable\",\"IP\",\"Port\",\"Log\")):\n        context.config.setRAW_STR(cstr)\n    context.config.read()\n    enable = context.config[\"enable\"]\n    context.YggdrasilServers = list()\n    for server_info in context.config[\"YggdrasilServers\"]:",
        "detail": "module.loadConfig",
        "documentation": {}
    },
    {
        "label": "enable",
        "kind": 5,
        "importPath": "module.loadConfig",
        "description": "module.loadConfig",
        "peekOfCode": "enable = False\nlog = False\ncstr = (\n    f\"\"\"{{\n    //* AndreaYggdrasilProxy\n    Enable : {tools.pyBool2JsonStr(enable)},\n    Log: {tools.pyBool2JsonStr(log)},\n    IP : \"0.0.0.0\",\n    Port : 32217,\n    YggdrasilServers : [",
        "detail": "module.loadConfig",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "module.loadConfig",
        "description": "module.loadConfig",
        "peekOfCode": "log = False\ncstr = (\n    f\"\"\"{{\n    //* AndreaYggdrasilProxy\n    Enable : {tools.pyBool2JsonStr(enable)},\n    Log: {tools.pyBool2JsonStr(log)},\n    IP : \"0.0.0.0\",\n    Port : 32217,\n    YggdrasilServers : [\n        {{",
        "detail": "module.loadConfig",
        "documentation": {}
    },
    {
        "label": "cstr",
        "kind": 5,
        "importPath": "module.loadConfig",
        "description": "module.loadConfig",
        "peekOfCode": "cstr = (\n    f\"\"\"{{\n    //* AndreaYggdrasilProxy\n    Enable : {tools.pyBool2JsonStr(enable)},\n    Log: {tools.pyBool2JsonStr(log)},\n    IP : \"0.0.0.0\",\n    Port : 32217,\n    YggdrasilServers : [\n        {{\n            //! Mojang 官方验证服务器",
        "detail": "module.loadConfig",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "def init():\n    logger.remove(0)\n    if(context.config[\"Log\"]):\n        log_filename = \"loguru.log\"\n        log_path = \"log\"\n        if(not os.path.exists):\n            os.mkdir(log_path)\n        log_fullpath= f\"{log_path}/{log_filename}\"\n        logger.add(log_fullpath)\n    else:",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "def debug(message: str, *args, **kwargs):\n    logger.debug(message, *args, **kwargs)\ndef info(message: str, *args, **kwargs):\n    logger.info(message, *args, **kwargs)\ndef success(message: str, *args, **kwargs):\n    logger.success(message, *args, **kwargs)\ndef warning(message: str, *args, **kwargs):\n    logger.warning(message, *args, **kwargs)\ndef error(message: str, *args, **kwargs):\n    logger.error(message, *args, **kwargs)",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "def info(message: str, *args, **kwargs):\n    logger.info(message, *args, **kwargs)\ndef success(message: str, *args, **kwargs):\n    logger.success(message, *args, **kwargs)\ndef warning(message: str, *args, **kwargs):\n    logger.warning(message, *args, **kwargs)\ndef error(message: str, *args, **kwargs):\n    logger.error(message, *args, **kwargs)\ndef critical(message: str, *args, **kwargs):\n    logger.critical(message, *args, **kwargs) \"\"\"",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "success",
        "kind": 2,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "def success(message: str, *args, **kwargs):\n    logger.success(message, *args, **kwargs)\ndef warning(message: str, *args, **kwargs):\n    logger.warning(message, *args, **kwargs)\ndef error(message: str, *args, **kwargs):\n    logger.error(message, *args, **kwargs)\ndef critical(message: str, *args, **kwargs):\n    logger.critical(message, *args, **kwargs) \"\"\"",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "def warning(message: str, *args, **kwargs):\n    logger.warning(message, *args, **kwargs)\ndef error(message: str, *args, **kwargs):\n    logger.error(message, *args, **kwargs)\ndef critical(message: str, *args, **kwargs):\n    logger.critical(message, *args, **kwargs) \"\"\"",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "def error(message: str, *args, **kwargs):\n    logger.error(message, *args, **kwargs)\ndef critical(message: str, *args, **kwargs):\n    logger.critical(message, *args, **kwargs) \"\"\"",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "critical",
        "kind": 2,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "def critical(message: str, *args, **kwargs):\n    logger.critical(message, *args, **kwargs) \"\"\"",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "trace",
        "kind": 5,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "trace = logger.trace\ndebug = logger.debug\ninfo = logger.info\nsuccess = logger.success\nwarning = logger.warning\nerror = logger.error\ncritical = logger.critical\n\"\"\" def trace(message: str, *args, **kwargs):\n    logger.trace(message, *args, **kwargs)\ndef debug(message: str, *args, **kwargs):",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "debug = logger.debug\ninfo = logger.info\nsuccess = logger.success\nwarning = logger.warning\nerror = logger.error\ncritical = logger.critical\n\"\"\" def trace(message: str, *args, **kwargs):\n    logger.trace(message, *args, **kwargs)\ndef debug(message: str, *args, **kwargs):\n    logger.debug(message, *args, **kwargs)",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "info = logger.info\nsuccess = logger.success\nwarning = logger.warning\nerror = logger.error\ncritical = logger.critical\n\"\"\" def trace(message: str, *args, **kwargs):\n    logger.trace(message, *args, **kwargs)\ndef debug(message: str, *args, **kwargs):\n    logger.debug(message, *args, **kwargs)\ndef info(message: str, *args, **kwargs):",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "success",
        "kind": 5,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "success = logger.success\nwarning = logger.warning\nerror = logger.error\ncritical = logger.critical\n\"\"\" def trace(message: str, *args, **kwargs):\n    logger.trace(message, *args, **kwargs)\ndef debug(message: str, *args, **kwargs):\n    logger.debug(message, *args, **kwargs)\ndef info(message: str, *args, **kwargs):\n    logger.info(message, *args, **kwargs)",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 5,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "warning = logger.warning\nerror = logger.error\ncritical = logger.critical\n\"\"\" def trace(message: str, *args, **kwargs):\n    logger.trace(message, *args, **kwargs)\ndef debug(message: str, *args, **kwargs):\n    logger.debug(message, *args, **kwargs)\ndef info(message: str, *args, **kwargs):\n    logger.info(message, *args, **kwargs)\ndef success(message: str, *args, **kwargs):",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "error = logger.error\ncritical = logger.critical\n\"\"\" def trace(message: str, *args, **kwargs):\n    logger.trace(message, *args, **kwargs)\ndef debug(message: str, *args, **kwargs):\n    logger.debug(message, *args, **kwargs)\ndef info(message: str, *args, **kwargs):\n    logger.info(message, *args, **kwargs)\ndef success(message: str, *args, **kwargs):\n    logger.success(message, *args, **kwargs)",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "critical",
        "kind": 5,
        "importPath": "module.log",
        "description": "module.log",
        "peekOfCode": "critical = logger.critical\n\"\"\" def trace(message: str, *args, **kwargs):\n    logger.trace(message, *args, **kwargs)\ndef debug(message: str, *args, **kwargs):\n    logger.debug(message, *args, **kwargs)\ndef info(message: str, *args, **kwargs):\n    logger.info(message, *args, **kwargs)\ndef success(message: str, *args, **kwargs):\n    logger.success(message, *args, **kwargs)\ndef warning(message: str, *args, **kwargs):",
        "detail": "module.log",
        "documentation": {}
    },
    {
        "label": "PlayerCache",
        "kind": 6,
        "importPath": "module.playerCache",
        "description": "module.playerCache",
        "peekOfCode": "class PlayerCache:\n    gc_time: int = 172800\n    #? 48h为GC阈值\n    def __init__(self) -> None:\n        self.player_data = dict()\n        self.key_timestamp = dict()\n        #? 记录下每个KV的时间戳 以便回收\n    def set(self, __key: str, __value: Any ) -> None:\n        self[__key] = __value\n    def get(self, __key: str) -> None:",
        "detail": "module.playerCache",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "module.playerCache",
        "description": "module.playerCache",
        "peekOfCode": "def init():\n    gc_thread = threading.Thread(target=PlayerCache.gcTask, name='player_data_gc_task')\n    gc_thread.start()\n#TODO 完成PlayerCache",
        "detail": "module.playerCache",
        "documentation": {}
    },
    {
        "label": "YggdrasilServer",
        "kind": 6,
        "importPath": "module.tools",
        "description": "module.tools",
        "peekOfCode": "class YggdrasilServer:\n    def __init__(self,level: int, name: str, url: str) -> None:\n        self.level = level\n        self.name = name\n        self.url = url\n        self.proxies = None\n        self.timeout = 5\n        #? 默认五秒超时\n        self.port = None\n        #? None即为不指定端口",
        "detail": "module.tools",
        "documentation": {}
    },
    {
        "label": "pyBool2JsonStr",
        "kind": 2,
        "importPath": "module.tools",
        "description": "module.tools",
        "peekOfCode": "def pyBool2JsonStr(value: bool) -> str:\n    if(value):\n        return \"true\"\n    else:\n        return \"false\"\nclass YggdrasilServer:\n    def __init__(self,level: int, name: str, url: str) -> None:\n        self.level = level\n        self.name = name\n        self.url = url",
        "detail": "module.tools",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "encode = \"utf-8\"",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "#context.player_cache:playerCache.PlayerCache",
        "kind": 5,
        "importPath": "launcher",
        "description": "launcher",
        "peekOfCode": "#context.player_cache:playerCache.PlayerCache = playerCache.PlayerCache()\n#TODO 完成PlayerCache\nlog.init()\nlog.info(\"[Config] Config Loaded\")\nfrom main import app\nif __name__ == \"__main__\":\n    if(context.config[\"Enable\"]):\n        import uvicorn\n        server_url = (f\"http://{context.config['IP']}:{context.config['Port']}\")\n        log.info(f\"Server running on {server_url}\")",
        "detail": "launcher",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def read_root():\n    return {\"Hello\": \"World\"}\n@app.post(\"/api/profiles/minecraft\")\ndef profiles_minecraft(req_body: Any):\n    print(req_body)\n@app.get(\"/sessionserver/session/minecraft/hasJoined\")\ndef has_joined(\n    # 从查询参数中获取 username 和 serverId 的值，使用 Query 类来设置一些校验规则\n    username: str = Query(..., min_length=3, max_length=16, pattern=r\"^([a-zA-Z0-9_]+)$\"),\n    serverId: str = Query(..., min_length=1, max_length=64)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "profiles_minecraft",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def profiles_minecraft(req_body: Any):\n    print(req_body)\n@app.get(\"/sessionserver/session/minecraft/hasJoined\")\ndef has_joined(\n    # 从查询参数中获取 username 和 serverId 的值，使用 Query 类来设置一些校验规则\n    username: str = Query(..., min_length=3, max_length=16, pattern=r\"^([a-zA-Z0-9_]+)$\"),\n    serverId: str = Query(..., min_length=1, max_length=64)\n):\n    log.info(f\"Player {username} try to join Server {serverId}\")\n    #? 遍历验证服务器列表",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "has_joined",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def has_joined(\n    # 从查询参数中获取 username 和 serverId 的值，使用 Query 类来设置一些校验规则\n    username: str = Query(..., min_length=3, max_length=16, pattern=r\"^([a-zA-Z0-9_]+)$\"),\n    serverId: str = Query(..., min_length=1, max_length=64)\n):\n    log.info(f\"Player {username} try to join Server {serverId}\")\n    #? 遍历验证服务器列表\n    for server in context.YggdrasilServers:\n        url = (f\"{server.url}/session/minecraft/hasJoined?username={username}&serverId={serverId}\")\n        log.info(url)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n@app.post(\"/api/profiles/minecraft\")\ndef profiles_minecraft(req_body: Any):\n    print(req_body)\n@app.get(\"/sessionserver/session/minecraft/hasJoined\")\ndef has_joined(\n    # 从查询参数中获取 username 和 serverId 的值，使用 Query 类来设置一些校验规则",
        "detail": "main",
        "documentation": {}
    }
]